buildscript {
    ext {
        springBootVersion = '2.4.0' as Object
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
//    id 'com.github.jacobono.jaxb' version '1.3.5'
    id 'com.github.jacobono.wsdl' version '1.7.7'
    id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
}

group = 'com.lambda'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jdbc'
//    implementation 'org.springframework.security.oauth:spring-security-oauth2:2.4.0.RELEASE'
    compile group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: '2.4.0'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    compile 'org.postgresql:postgresql'
    compile 'mysql:mysql-connector-java'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version: '2.3.7.RELEASE'
    compile group: 'org.springframework.ws', name: 'spring-ws-security', version: '3.0.10.RELEASE'
    compile (group: 'com.sun.xml.wss', name: 'xws-security', version: '3.0') {
        exclude group: 'javax.xml.crypto', module: 'xmldsig'
        exclude group: 'javax.activation', module: 'activation'
    }
    compile group: 'wsdl4j', name: 'wsdl4j', version: '1.6.3'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile 'org.springframework.security:spring-security-test'
    jaxws 'com.sun.xml.ws:jaxws-tools:2.2.8-promoted-b131'
    jaxws 'com.sun.xml.ws:jaxws-rt:2.2.8-promoted-b131'
//    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41'
//    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
//    jaxb 'javax.xml.bind:jaxb-api:2.2.7'
    jaxb 'org.glassfish.jaxb:jaxb-xjc:2.2.11'
    jaxb 'org.glassfish.jaxb:jaxb-runtime:2.2.11'
}

test {
    useJUnitPlatform()
}

tasks.replace("war").doLast {
    println("Replace war task")
}

war.enabled(false)

bootWar {
    enabled = false
}

bootJar {
    enabled = true
    launchScript()
}

task stage(dependsOn: ['bootJar', 'clean'])
bootJar.mustRunAfter clean

//task copyToLib(type: Copy) {
//    into "$buildDir/libs"
//    from(configurations.compile)
//}
//
//stage.dependsOn(copyToLib)

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) {
            test.enabled = false
        }
}

jaxb {
    xsdDir = "src/main/resources"
    xsdIncludes = ['**/client.xsd']
    xjc {
        removeOldOutput = "yes"
        header = false
        destinationDir = "generated"
        generatePackage = "com.lambda.dto.soap"
        accessExternalSchema = "all"
    }
}
