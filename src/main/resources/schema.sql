drop table if exists oauth_client_details;
create table oauth_client_details (
                                      client_id VARCHAR(255) PRIMARY KEY,
                                      resource_ids VARCHAR(255),
                                      client_secret VARCHAR(255),
                                      scope VARCHAR(255),
                                      authorized_grant_types VARCHAR(255),
                                      web_server_redirect_uri VARCHAR(255),
                                      authorities VARCHAR(255),
                                      access_token_validity INTEGER,
                                      refresh_token_validity INTEGER,
                                      additional_information VARCHAR(4096),
                                      autoapprove VARCHAR(255)
);

drop table if exists oauth_client_token;
create table oauth_client_token (
                                    token_id VARCHAR(255),
                                    token LONG VARBINARY,
                                    authentication_id VARCHAR(255) PRIMARY KEY,
                                    user_name VARCHAR(255),
                                    client_id VARCHAR(255)
);

drop table if exists oauth_access_token;
create table oauth_access_token (
                                    token_id VARCHAR(255),
                                    token LONG VARBINARY,
                                    authentication_id VARCHAR(255) PRIMARY KEY,
                                    user_name VARCHAR(255),
                                    client_id VARCHAR(255),
                                    authentication LONG VARBINARY,
                                    refresh_token VARCHAR(255)
);

drop table if exists oauth_refresh_token;
create table oauth_refresh_token (
                                     token_id VARCHAR(255),
                                     token LONG VARBINARY,
                                     authentication LONG VARBINARY
);

drop table if exists oauth_code;
create table oauth_code (
                            code VARCHAR(255), authentication LONG VARBINARY
);

drop table if exists oauth_approvals;
create table oauth_approvals (
                                 userId VARCHAR(255),
                                 clientId VARCHAR(255),
                                 scope VARCHAR(255),
                                 status VARCHAR(10),
                                 expiresAt TIMESTAMP,
                                 lastModifiedAt TIMESTAMP
);

create table customUsers(
                      username varchar_ignorecase(50) not null primary key,
                      password varchar_ignorecase(500) not null,
                      enabled boolean not null
);

create table authorities (
                             username varchar_ignorecase(50) not null,
                             authority varchar_ignorecase(50) not null,
                             constraint fk_authorities_users foreign key(username) references customUsers(username)
);
create unique index ix_auth_username on authorities (username,authority);

create table `groups` (
                        id bigint generated by default as identity(start with 0) primary key,
                        group_name varchar_ignorecase(50) not null
);

create table group_authorities (
                                   group_id bigint not null,
                                   authority varchar(50) not null,
                                   constraint fk_group_authorities_group foreign key(group_id) references groups(id)
);

create table group_members (
                               id bigint generated by default as identity(start with 0) primary key,
                               username varchar(50) not null,
                               group_id bigint not null,
                               constraint fk_group_members_group foreign key(group_id) references groups(id)
);

create table authentication_token
(
    id LONG auto_increment,
    token VARCHAR(50) null,
    username VARCHAR(50) null,
    create_date TIMESTAMP not null,
    expire_date TIMESTAMP not null,
    status BIT(10) null,
    constraint authentication_token_pk
        primary key (id)
)
    comment 'Authentication token management table';

create unique index authentication_token_token_uindex
    on authentication_token (token);

